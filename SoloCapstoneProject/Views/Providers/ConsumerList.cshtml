@model IEnumerable<SoloCapstoneProject.Models.Consumer>

@{
    ViewData["Title"] = "ConsumerList";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Schedule</h1>

@*<p>
        <a asp-action="Create">Create New</a>
    </p>*@

@* API Key : AIzaSyBL12MfL6j5xbtVfhKy6jIC-iSAd762g1g *@


<head>
    <style>
        /* Set the size of the div element that contains the map */
        #map {
            height: 400px; /* The height is 400 pixels */
            width: 100%; /* The width is the width of the web page */
        }
    </style>
</head>
<body>
    <h3>Map out your customers</h3>
    <!--The div element for the map -->
    <div id="map"></div>
    <script>
        // Initialize and add the map
        function initMap() {
            // The location of Uluru
            var radcliffe = { lat: 43.186051, lng: -87.9788874 };
            // The map, centered at Uluru
            var map = new google.maps.Map(
                document.getElementById('map'), { zoom: 15, center: radcliffe });
            // The marker, positioned at Uluru
            var marker = new google.maps.Marker({ position: radcliffe, map: map });
        }
    </script>
    <!--Load the API from the specified URL
    * The async attribute allows the browser to render the page while the API loads
    * The key parameter will contain your own API key (which is not needed for this tutorial)
    * The callback parameter executes the initMap() function
    -->
    <script defer
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAMsdaoeePqO9F_hpJsr3xJSPbPfF7dW0U&callback=initMap">
    </script>
</body>



<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.FirstName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.LastName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Address)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.City)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.State)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Zipcode)
            </th>
            @*<th>
                    @Html.DisplayNameFor(model => model.IdentityUser)
                </th>*@
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.FirstName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.LastName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Address)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.City)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.State)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Zipcode)
                </td>
                @*<td>
                        @Html.DisplayFor(modelItem => item.IdentityUser.Id)
                    </td>*@
                @*<td>
                        <a asp-action="Edit" asp-route-id="@item.ConsumerId">Edit</a> |
                        <a asp-action="Details" asp-route-id="@item.ConsumerId">Details</a> |
                        <a asp-action="Delete" asp-route-id="@item.ConsumerId">Delete</a>
                    </td>*@
            </tr>
        }
    </tbody>
</table>
</div>
